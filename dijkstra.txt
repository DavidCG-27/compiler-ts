// Algoritmo de Dijkstra by David Covián Gómez

let MAX_NODES:int;
let INFINITY:int;

let graph:[10][10]int;
let distance:[10]int;
let visited:[10]int;
let previous:[10]int;
let startNode:int;
let numNodes:int;
let directed:int;

function initGraph(): void {
    let i,j:int;

    i = 0;
    while (i < MAX_NODES) {
        j = 0;
        while (j < MAX_NODES) {
            if (i == j) {
                graph[i][j] = 0;
            }
            else {
                graph[i][j] = INFINITY;
            }
            j = j + 1;
        }
        i = i + 1;
    }
}

function addEdge(src:int, dest:int, weight:int): void {
    if (src >= 0 && src < numNodes && dest >= 0 && dest < numNodes) {
        graph[src][dest] = weight;
        if(directed!=0){
            graph[dest][src] = weight;
        }
    }
}

function getPivot(): int {
    let min, minIndex, v:int;
    min = INFINITY;
    minIndex = 0;
    v = 0;
    while (v < numNodes) {
        if (visited[v] == 0 && distance[v] <= min) {
            min = distance[v];
            minIndex = v;
        }
        v = v + 1;
    }

    return minIndex;
}

function dijkstra(start:int): void {
    let i:int;
    let u:int;
    let v:int;

    i = 0;
    while (i < numNodes) {
        distance[i] = INFINITY;
        visited[i] = 0;
        previous[i] = -1;
        i = i + 1;
    }

    distance[start] = 0;

    i = 0;
    while (i < numNodes - 1) {
        u = getPivot();
        visited[u] = 1;

        v = 0;
        while (v < numNodes) {
            if (visited[v] == 0 && graph[u][v] != INFINITY &&
                distance[u] != INFINITY &&
                (distance[u] + graph[u][v] < distance[v])) {
                distance[v] = distance[u] + graph[u][v];
                previous[v] = u;
            }
            v = v + 1;
        }
        i = i + 1;
    }
}

function printPath(node:int): void {
    if (previous[node] != -1) {
        printPath(previous[node]);
    }
    log node,' ';
}

function printResults(): void {
    let i:int;

    log 'N','o','d','o','\t','D','i','s','t','a','n','c','i','a','\t','C','a','m','i','n','o','\n';

    i = 0;
    while (i < numNodes) {
        log i,'\t';

        if (distance[i] == INFINITY) {
            log 'I','n','f','\t';
        }
        else {
            log distance[i],'\t';
        }

        printPath(i);
        log '\n';

        i = i + 1;
    }
}

function main(): void {
    MAX_NODES = 10;
    INFINITY = 9999;
    numNodes = 5;
    log 'N','o','d','o',' ','i','n','i','c','i','a','l','\n';
    input startNode;
    while (startNode >= numNodes || startNode < 0){
        log 'E','R','R','O','R',':',' ','M','A','X','=',numNodes-1,' ','M','I','N','=','0','\n';
        input startNode;
    }

    log '0',' ','p','a','r','a',' ','g','r','a','f','o',' ','d','i','r','i','g','i','d','o',' ','\n','C','u','a','l','q','u','i','e','r',' ','o','t','r','o',' ','p','a','r','a',' ','g','r','a','f','o',' ','N','O',' ','d','i','r','i','g','i','d','o','\n';

    input directed;
    if (directed != 0){
        log 'N','O',' ','D','I','R','I','G','I','D','O','\n';
    } else{
        log 'D','I','R','I','G','I','D','O','\n';
    }

    initGraph();

    addEdge(0, 1, 4);
    addEdge(0, 2, 1);
    addEdge(1, 2, 2);
    addEdge(1, 3, 5);
    addEdge(2, 3, 8);
    addEdge(2, 4, 10);
    addEdge(3, 4, 2);

    dijkstra(startNode);
    printResults();
}